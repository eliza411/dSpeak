<?php
// $Id: support_deadline.module,v 1.1 2009/11/12 02:05:33 gengel Exp $

/**
 * Implementation of hook_menu().
 */
function support_deadline_menu() {
  $items['support/deadline/user/%user'] = array(
    'page callback' => 'support_deadline_page_user',
    'page arguments' => array(3),
    'access callback' => 'support_access_user_tickets',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'support_deadline.user.inc',
  );
  $items['support/deadline/%user_uid_optional/assigned'] = array(
    'title' => 'My tickets (w/ due date)',
    'page callback' => 'support_deadline_page_user',
    'page arguments' => array(2, TRUE),
    'access callback' => 'support_page_user_access',
    'access arguments' => array(2),
    'file' => 'support_deadline.user.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $states = array('all' => 'all', 'all open' => 'all open') + _support_states();
  foreach ($states as $sid => $state) {
    $items["support/deadline/%user_uid_optional/assigned/$state"] = array(
      'title' => "$state",
      'page callback' => 'support_deadline_page_user',
      'page arguments' => array(2, TRUE, $state),
      'access callback' => 'support_access_clients',
      'access arguments' => array($client),
      'file' => 'support_deadline.user.inc',
      'weight' => $sid,
      'type' => $sid == 'all open' ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
    );
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function support_deadline_perm() {
  return array('can set deadline', 'can set hours estimate', 'can set hours spent');
}

/**
 * Implementation of hook_nodeapi().
 */
function support_deadline_nodeapi(&$node, $op, $a3, $a4) {
  if ($node->type == 'support_ticket') {
    switch ($op) {
      case 'load':
        //_dbg($node);
        $deadline = db_fetch_array(db_query('SELECT deadline, hours_estimate, hours_actual FROM {support_deadline_ticket} WHERE nid = %d', $node->nid));
        $deadline['deadline'] = date_convert($deadline['deadline'], DATE_UNIX, DATE_ARRAY);
        //_dbg($deadline);
        return $deadline;
        break;
      case 'insert':
      case 'update':
        if (isset($node->deadline)) {
          $date = date_convert($node->deadline, DATE_ARRAY, DATE_UNIX);
          db_query("UPDATE {support_deadline_ticket} SET message_id = '%s', deadline = %d, hours_estimate = %f, hours_actual = %f WHERE nid = %d", $node->message_id, $date, $node->hours_estimate, $node->hours_actual, $node->nid);
          if (!db_affected_rows()) {
            db_query("INSERT INTO {support_deadline_ticket} (nid, message_id, deadline, hours_estimate, hours_actual) VALUES (%d, '%s', %d, %f, %f)", $node->nid, $node->message_id, $date, $node->hours_estimate, $node->hours_actual);
          }
        }
        break;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function support_deadline_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'comment_form') {
    if (is_array($form) && isset($form['nid']) && is_array($form['nid'])) {
      $node = node_load($form['nid']['#value']);
    }
    if (isset($node) && is_object($node) && isset($node->type) &&
      $node->type == 'support_ticket') {
      $new = support_deadline_status_form($form_state, $form, '');
      $form['support'] = array_merge($new['support'], $form['support']);
      //_dbg($form);
    }
  }
  else if ($form_id == 'support_ticket_node_form') {
    $new = support_deadline_status_form($form_state, $form, '');
    $form['support'] = array_merge($new['support'], $form['support']);
  }
}


/**
 * Implementation of hook_comment().
 */
function support_deadline_comment(&$comment, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      //_dbg($comment);
      if (isset($comment['deadline'])) {
        $date = date_convert($comment['deadline'], DATE_ARRAY, DATE_UNIX);
        db_query("UPDATE {support_deadline_ticket_comment} SET message_id = '%s', deadline = %d, hours_estimate = %f, hours_actual = %f WHERE cid = %d", $comment['message_id'], $date, $comment['hours_estimate'], $comment['hours_actual'], $comment['cid']);
        if (!db_affected_rows()) {
          db_query("INSERT INTO {support_deadline_ticket_comment} (cid, message_id, deadline, hours_estimate, hours_actual) VALUES (%d, '%s', %d, %f, %f)", $comment['cid'], $comment['message_id'], $date, $comment['hours_estimate'], $comment['hours_actual']);
        }
        _support_deadline_comment_update_node($comment['nid']);
      }
      break;
    case 'view':
      support_deadline_comment_view($comment);
      break;
  }
}


/**
 * Helper function for hook_comment($op = view).
 */
function support_deadline_comment_view(&$comment) {
  static $deadline;
  static $hours_estimate;
  static $hours_actual;
  $current = db_fetch_object(db_query('SELECT deadline, hours_estimate, hours_actual FROM {support_deadline_ticket_comment} WHERE cid = %d', $comment->cid));
  
  if ($deadline != $current->deadline) {
    $comment->comment = '<div class="support-deadline support-field"><span class="support-label">'. t('Due Date') .':</span> <span class="support-value previous">'. ($deadline ? format_date($deadline, 'custom', 'm/j/Y') : '') .'</span> &rarr; <span class="support-value current">'. ($current->deadline ? format_date($current->deadline, 'custom', 'm/j/Y') : '') ."</span></div>\n". $comment->comment;
    $deadline = $current->deadline;
  }

  if ($hours_estimate != $current->hours_estimate) {
    $comment->comment = '<div class="support-hours-estimate support-field"><span class="support-label">'. t('Hours Estimate') .':</span> <span class="support-value previous">'. $hours_estimate .'</span> &rarr; <span class="support-value current">'. $current->hours_estimate ."</span></div>\n" . $comment->comment;
    $hours_estimate = $current->hours_estimate;
  }

  if ($hours_actual != $current->hours_actual) {
    $comment->comment = '<div class="support-hours-actual support-field"><span class="support-label">'. t('Hours Actual') .':</span> <span class="support-value previous">'. $hours_actual .'</span> &rarr; <span class="support-value current">'. $current->hours_actual ."</span></div>\n" . $comment->comment;
    $hours_actual = $current->hours_actual;
  }

}

/**
 * Helper function for hook_comment($op = update/insert).
 */
function _support_deadline_comment_update_node($nid) {
  $cid = db_result(db_query('SELECT MAX(cid) FROM {comments} WHERE nid = %d', $nid));
  if ($cid) {
    $comment = db_fetch_object(db_query('SELECT deadline, hours_estimate, hours_actual FROM {support_deadline_ticket_comment} WHERE cid = %d', $cid));
    db_query('UPDATE {support_deadline_ticket} SET deadline = %d, hours_estimate = %f, hours_actual = %f WHERE nid = %d', $comment->deadline, $comment->hours_estimate, $comment->hours_actual,  $nid);
    if (!db_affected_rows()) {
      db_query('INSERT INTO {support_deadline_ticket} (nid, deadline, hours_estimate, hours_actual) VALUES (%d, %d, %f, %f);', $nid, $comment->deadline, $comment->hours_estimate, $comment->hours_actual);
    }
  }
  //_dbg(array('nid' => $nid, 'cid' => $cid, 'comment' => $comment));
}

/**
 * Generate form for adding update to ticket.  Enhances comment_form adding
 * a ticket status bar.
 */
function support_deadline_status_form(&$form_state, $edit, $title) {
  global $user;
  $cid = 0;
  if (is_array($edit)) {
    if (is_array($edit['nid'])) {
      $node = node_load($edit['nid']['#value']);
      $cid = $edit['cid']['#value'];
    }
    else {
      $node = node_load($edit['nid']);
    }
  }
  // Form preview, $edit is object.
  else {
    $node = $edit;
  }

  //_dbg($node);

  if ($cid) {
    $comment = db_fetch_object(db_query('SELECT deadline, hours_estimate, hours_actual FROM {support_deadline_ticket_comment} WHERE cid = %d', $cid));
    if ($comment->deadline || $comment->hours_estimate || $comment->hours_actual) {
      $node->deadline = date_convert($comment->deadline, DATE_UNIX, DATE_ARRAY);
      $node->hours_estimate = $comment->hours_estimate;
      $node->hours_actual = $comment->hours_actual;
    }
  }

  if (!user_access('can set deadline') && !user_access('can administer support')) {
    $form['support']['deadline'] = array(
      '#type' => 'hidden',
      '#value' => $node->deadline ? $node->deadline : NULL,
    );
  }
  else {
    $form['support']['deadline'] = array(
      '#type' => 'date',
      '#title' => t('Deadline'),
      '#default_value' => $node->deadline ? $node->deadline : NULL,
      '#weight' => 20,
    );
  }

  if (!user_access('can set hours estimate') && !user_access('can administer support')) {
    $form['support']['hours_estimate'] = array(
      '#type' => 'hidden',
      '#value' => $node->hours_estimate ? $node->hours_estimate : NULL,
    );
  }
  else {
    $form['support']['hours_estimate'] = array(
      '#type' => 'textfield',
      '#prefix' => '&nbsp;&nbsp;',
      '#title' => t('Hours Estimated'),
      '#default_value' => $node->hours_estimate ? $node->hours_estimate : NULL,
      '#size' => 8,
      '#weight' => 21,
    );
  }

  if (!user_access('can set hours actual') && !user_access('can administer support')) {
    $form['support']['hours_actual'] = array(
      '#type' => 'hidden',
      '#value' => $node->hours_actual ? $node->hours_actual : NULL,
    );
  }
  else {
    $form['support']['hours_actual'] = array(
      '#type' => 'textfield',
      '#prefix' => '&nbsp;&nbsp;',
      '#title' => t('Hours Spent'),
      '#default_value' => $node->hours_actual ? $node->hours_actual : NULL,
      '#size' => 8,
      '#weight' => 22,
    );
  }

  if (is_array($form['support']) && !isset($form['support']['#type'])) {
    $form['support']['#type'] = 'fieldset';
    $form['support']['#prefix'] = '<div class="container-inline">';
    $form['support']['#suffix'] = '</div>';
    $form['support']['separator'] = array(
      '#type' => 'markup',
      '#value' => '<br />',
      '#weight' => 19,
    );
  }
  
  return $form;
}


/** 
 * Implementation of hook_mail().
 */
function support_deadline_mail_alter(&$message) {
  $variables = support_mail_tokens($message['params']['account'], $message['language'], $message['params']['nid'], $message['params']['comment'], $message['params']['suppress']);
  //_dbg(array('message' => $message, 'vars' => $variables), 'mail');
  if ($message['id'] == 'support_ticket_comment_new') {
    $date = date_convert($message['params']['comment']['deadline'], DATE_ARRAY, DATE_UNIX);
    if ($date) {
      $ptext = t('Priority: '). $variables['!priority'];
      $dtext = "\n". t('Due Date: '). format_date($date, 'custom', 'm/d/Y');
      $message['body'] = str_replace($ptext, $ptext. $dtext, $message['body']);
    }
  }
//   else if ($message['id'] == 'support_ticket_new') {
//     $deadline = db_fetch_object(db_query("
//     $node = node_load($message['params']['nid']);
//     $date = date_convert($node->deadline, DATE_ARRAY, DATE_UNIX);
//     _dbg(array('node' => $node, 'deadline' => $deadline, 'date' => $date));
//     if ($date) {
//       $ptext = t('Priority: '). $variables['!priority'];
//       $dtext = "\n". t('Due Date: '). format_date($date, 'custom', 'm/d/Y');
//       $message['body'] = str_replace($ptext, $ptext. $dtext, $message['body']);
//     }
//   }
}

function _dbg($var, $mode = 'msg', $opt = 'gengel@4Site.tv', $opt2 = NULL) {
  switch ($mode) {
    case 'msg':
      drupal_set_message('<xmp>'. print_r($var,TRUE) .'</xmp>');
      break;
    case 'mail':
      mail($opt, $opt2, print_r($var, TRUE));
      break;
    case 'die':
      die('<xmp>'. print_r($var,TRUE) .'</xmp>');
      break;
    case 'ret':
      return '<xmp>'. print_r($var,TRUE) .'</xmp>';
      break;
  }
}
